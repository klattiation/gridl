{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap b151bacbef4c5171fe63","webpack:///./src/index.js"],"names":["Point","x","y","add","p1","p2","orthogonalPoints","diagonalPoints","mergedPoints","stepBounded","position","delta","columns","rows","newPos","maxX","undefined","maxY","stepUnbounded","toMap2D","data","reduce","res","cell","index","pos","index2pos","isNaN","Error","Math","floor","pos2index","getNeighbours","includeDiagonal","doStep","pointSet","map","neighbour","point","getNeighboursBounded","getNeighboursUnbounded","Grid","_rows","_cols","importData","fillAllWith","length","numCells","_data","Array","from","indexOrPos","nextPos","setCellAtIndex","area","forEach","row","r","c","setCellAtPos","startIndex","value","removeCellAtIndex","getAtIndex"],"mappings":"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","file":"gridl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gridl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gridl\"] = factory();\n\telse\n\t\troot[\"gridl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b151bacbef4c5171fe63","const Point = (x, y) => ({ x, y });\n\nconst add = (p1, p2) => ({\n    x: p1.x + p2.x,\n    y: p1.y + p2.y,\n});\n\nconst orthogonalPoints = [\n    new Point(0, -1), // top\n    new Point(1, 0), // right\n    new Point(0, 1), // bottom\n    new Point(-1, 0), // left\n];\n\nconst diagonalPoints = [\n    new Point(1, -1), // top right\n    new Point(1, 1), // bottom right\n    new Point(-1, 1), // bottom left\n    new Point(-1, -1), // top left\n];\n\nconst mergedPoints = [\n    orthogonalPoints[0], // top\n    diagonalPoints[0],   // top right\n    orthogonalPoints[1], // right\n    diagonalPoints[1],   // bottom right\n    orthogonalPoints[2], // bottom\n    diagonalPoints[2],   // bottom left\n    orthogonalPoints[3], // left\n    diagonalPoints[3],   // top left\n];\n\n/**\n * Returns the new position after a step of delta.\n * If a step goes beyond the grid, undefined is returned.\n *\n * @param {Point} position - The starting position.\n * @param {Point} delta - The step to take from the starting position.\n * @param {Number} columns - The number of columns.\n * @param {Number} rows - The number of rows.\n * @returns {(Point|undefined)} The new position or undefined if none is available.\n */\nexport const stepBounded = (position, delta, columns, rows) => {\n    const newPos = add(position, delta);\n\n    const maxX = columns - 1;\n    if (newPos.x > maxX || newPos.x < 0) {\n        return undefined;\n    }\n\n    const maxY = rows - 1;\n    if (newPos.y > maxY || newPos.y < 0) {\n        return undefined;\n    }\n\n    return newPos;\n};\n\n/**\n * Returns the new position after a step of delta.\n * If a the step goes beyond the grid, the position will continue on the opposite side of the grid.\n *\n * CAUTION: Might not work if delta.x/delta.y are bigger than the number of rows/columns!\n *\n * @param {Point} position - The starting position.\n * @param {Point} delta - The step to take from the starting position.\n * @param {Number} columns - The number of columns.\n * @param {Number} rows - The number of rows.\n * @returns {Point} The new position.\n */\nexport const stepUnbounded = (position, delta, columns, rows) => {\n    const newPos = add(position, delta);\n\n    const maxX = columns - 1;\n    if (newPos.x > maxX) {\n        newPos.x = newPos.x - maxX - 1;\n    }\n    else if (newPos.x < 0) {\n        newPos.x = maxX - newPos.x - 1;\n    }\n\n    const maxY = rows - 1;\n    if (newPos.y > maxY) {\n        newPos.y = newPos.y - maxY - 1;\n    }\n    else if (newPos.y < 0) {\n        newPos.y = maxY - newPos.y - 1;\n    }\n\n    return newPos;\n};\n\nexport const toMap2D = (data, columns) => data.reduce((res, cell, index) => {\n    const pos = index2pos(index, columns);\n    if (!res[pos.y]) {\n        res[pos.y] = [];\n    }\n    res[pos.y][pos.x] = cell;\n    return res;\n}, []);\n\nexport const index2pos = (index, columns) => {\n    if (isNaN(columns)) {\n        throw new Error(`The number of columns must be a number. Given: ${columns}`);\n    }\n    return new Point(index % columns, Math.floor(index / columns));\n};\n\nexport const pos2index = (pos, columns) => {\n    if (isNaN(columns)) {\n        throw new Error(`The number of columns must be a number. Given: ${columns}`);\n    }\n    return pos.x + pos.y * columns;\n};\n\n/**\n * Get all neighbours in clockwise order.\n *\n * @private\n * @param {Array} data - The one dimensional data array.\n * @param {Number} index - The starting index\n * @param {Boolean} includeDiagonal - Whether to include diagonal neighbours or not.\n * @param {Number} columns - The number of columns the grid has.\n * @param {Number} rows - The number of rows the grid has.\n * @param {Function} doStep - Function that resolves a single neighbour.\n * @returns {Array} The neighbours.\n */\nconst getNeighbours = (data, index, includeDiagonal, columns, rows, doStep) => {\n    const pointSet = includeDiagonal ? mergedPoints : orthogonalPoints;\n    const pos = index2pos(index, columns);\n    return pointSet.map(point => {\n        const neighbour = doStep(pos, point, columns, rows);\n        return neighbour ? data[pos2index(neighbour, columns)] : undefined;\n    });\n};\n\nexport const getNeighboursBounded = (data, index, columns, rows, includeDiagonal = false) => {\n    return getNeighbours(data, index, includeDiagonal, columns, rows, stepBounded);\n};\n\nexport const getNeighboursUnbounded = (data, index, columns, rows, includeDiagonal = false) => {\n    return getNeighbours(data, index, includeDiagonal, columns, rows, stepUnbounded);\n};\n\nexport class Grid {\n\n    constructor({rows, columns, data = null}) {\n        this._rows = rows;\n        this._cols = columns;\n\n        if (data) {\n            this.importData(data);\n        }\n        else {\n            this.fillAllWith(null);\n        }\n    }\n\n    importData(data) {\n        if (data.length !== this.numCells()) {\n            throw new Error(`Importing data failed. Length of [${data.length}] doesn't fit [${this.numCells()}].`);\n        }\n        this._data = data;\n    }\n\n    exportData() {\n        return [...this._data];\n    }\n\n    fillAllWith(cell) {\n        const length = this._rows * this._cols;\n        this._data = Array.from({length}, () => cell);\n    }\n\n    getNeighboursBounded(index, includeDiagonal = false) {\n        return getNeighboursBounded(this._data, index, this._cols, this._rows, includeDiagonal);\n    }\n\n    getNeighboursUnbounded(index, includeDiagonal = false) {\n        return getNeighboursUnbounded(this._data, index, this._cols, this._rows, includeDiagonal);\n    }\n\n    getNextIndex(indexOrPos, delta) {\n        const pos = isNaN(indexOrPos) ? indexOrPos : index2pos(indexOrPos, this._cols);\n        const nextPos = stepUnbounded(pos, delta, this._cols, this._rows);\n        return pos2index(nextPos, this._cols);\n    }\n\n    center() {\n        return new Point(\n            Math.floor((this._cols - 1) * .5),\n            Math.floor((this._rows - 1) * .5)\n        );\n    }\n\n    getSize() {\n        return {\n            columns: this._cols,\n            rows: this._rows,\n        };\n    }\n\n    numCells() {\n        return this._rows * this._cols;\n    }\n\n    setCellAtPos(cell, pos) {\n        const index = pos2index(pos, this._cols);\n        this.setCellAtIndex(cell, index);\n    }\n\n    setCellAtIndex(cell, index) {\n        this._data[index] = cell;\n    }\n\n    index2pos(index) {\n        return index2pos(index, this._cols);\n    }\n\n    pos2index(pos) {\n        return pos2index(pos, this._cols);\n    }\n\n    mergeGridAtIndex(area, index) {\n        const pos = this.index2pos(index);\n        area.forEach((row, r) => {\n            row.forEach((cell, c) => {\n                this.setCellAtPos(cell, new Point(pos.x + c, pos.y + r));\n            });\n        });\n    }\n\n    includesAreaOnlyThisValue(startIndex, area, value) {\n        const pos = this.index2pos(startIndex);\n\n        if (!area.length) {\n            // console.warn('area is empty');\n            return true;\n        }\n\n        // area too high\n        if (pos.y + area.length < this._data.length) {\n            return false;\n        }\n\n        // area too wide\n        if (pos.x + area[0].length < this._data[0].length) {\n            return false;\n        }\n\n        // search for values\n        for (let r = pos.y; r < area.length; r++) {\n            for (let c = pos.x; c < area[r].length; c++) {\n                if (this._data[r][c] !== value) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    removeCellAtPos(pos) {\n        const index = pos2index(pos, this._cols);\n        this.removeCellAtIndex(index);\n    }\n\n    removeCellAtIndex(index) {\n        this._data[index] = null;\n    }\n\n    getAtPosition(pos) {\n        return this.getAtIndex(pos2index(pos, this._cols));\n    }\n\n    getAtIndex(index) {\n        return this._data[index];\n    }\n\n    get rows() {\n        return this._rows;\n    }\n\n    get columns() {\n        return this._cols;\n    }\n\n    serialilze() {\n        return {\n            rows: this._rows,\n            columns: this._cols,\n            data: [...this._data],\n        };\n    }\n\n}\n\nexport default {\n    Grid,\n    getNeighboursBounded,\n    getNeighboursUnbounded,\n    pos2index,\n    index2pos,\n    toMap2D,\n    stepBounded,\n    stepUnbounded,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}