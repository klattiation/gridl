{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap b6cd8ead740066fb8280","webpack:///./src/index.js"],"names":["_isValidGridArray","data","Array","isArray","Error","forEach","row","i","length","_index2pos","index","columns","Math","floor","_pos2index","position","_toArray2D","array1D","reduce","res","cell","pos","_flatten","array2D","_getColumn","x","map","_getRow","y","_addPositions","p1","p2","_subtractPositions","_swap","arr","i1","i2","tmp","_move","fromIndex","toIndex","splice","_isNotInArea","areaSize","_getValueAt","_data","isNaN","_setValueAt","api","value","_setAreaAt","rows","area","anchor","r","targetPos","c","setValueAt","_getAreaAt","size","posTmp","end","min","max","rArea","cArea","getValueAt","_findPosition","callback","findIndex","undefined","_findPositionInArea","getAreaAt","flat","areaIndex","areaColumns","posInArea","_checkAreaFitsAt","fitsHorizontally","fitsVertically","_getRelativePosition","startPos","direction","_moveCell","from","to","_moveRow","_grid","_columns","_rows","yFrom","yTo","_moveColumn","grid","xFrom","xTo","newGrid","_addRowAt","_addColumnAt","column","_removeRowAt","_removeColumnAt","filter","v","_clip","endPoint","_swapCells","pos1","pos2","_swapRows","y1","y2","_swapColumns","x1","x2","_rotate","steps","mod","option","reverse","gridl","getRelativeValue","getRelativePosition","moveCell","moveCellFrom","moveRow","getData","moveColumn","getColumn","getRow","addRowAt","addColumnAt","removeRowAt","removeColumnAt","clip","swapCells","swapRows","swapColumns","setAreaAt","checkAreaFitsAt","findPosition","findPositionInArea","rotate","directions","Object","freeze","TOP","TOP_RIGHT","RIGHT","BOTTOM_RIGHT","BOTTOM","BOTTOM_LEFT","LEFT","TOP_LEFT","generateData","parsedColumns","parseInt","parsedRows","vr","vc","generate"],"mappings":"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","file":"gridl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gridl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gridl\"] = factory();\n\telse\n\t\troot[\"gridl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b6cd8ead740066fb8280","function _isValidGridArray(data) {\n    if (!Array.isArray(data)) {\n        throw new Error('Trying to import data that is not an array.');\n    }\n    data.forEach((row, i) => {\n        if (!Array.isArray(row)) {\n            throw new Error('Trying to import data that is not an array.');\n        }\n        if (i > 0 && data[i - 1].length !== row.length) {\n            throw new Error('Trying to import data with different row lengths.');\n        }\n        if (row.length < 1) {\n            throw new Error('Trying to import grid without any columns. You need to provide at least one column.');\n        }\n    });\n}\n\n/**\n * Converts cell index into a cell position.\n *\n * @param {Integer} index - The index of the cell.\n * @param {Integer} columns - The number of columns the grid has.\n * @returns {Array} - The equivalent position within the grid as [x, y].\n */\nconst _index2pos = (index, columns) => [index % columns, Math.floor(index / columns)];\n\n/**\n * Converts a position into cell index.\n *\n * @param {Array} position - The two dimensional position array as [x, y].\n * @param {Integer} columns - The number of columns the grid has.\n * @returns {Integer} - The equivalent index within the grid.\n */\nconst _pos2index = (position, columns) => position && position[0] + position[1] * columns;\n\n/**\n * Converts an one-dimensional grid array into a two-dimensional grid.\n *\n * @param {Array} array1D - The one dimensional array.\n * @param {Integer} columns - The number columns the new array should have.\n * @returns {Array} - The two-dimensional array.\n */\nconst _toArray2D = (array1D, columns) => array1D.reduce((res, cell, index) => {\n    const pos = _index2pos(index, columns);\n    if (!res[pos[1]]) {\n        res[pos[1]] = [];\n    }\n    res[pos[1]][pos[0]] = cell;\n    return res;\n}, []);\n\n/**\n * Convert a two-dimensional array into a one-dimensional array.\n *\n * @param {Array} array2D - The two dimensional array to convert.\n * @returns {Array} - The flattened one-dimensional array.\n */\nconst _flatten = array2D => array2D.reduce((res, row) => [...res, ...row], []);\n\nconst _getColumn = (data, x) => {\n    if (x >= 0 && x < data[0].length) {\n        return data.map(row => row[x]);\n    }\n};\n\nconst _getRow = (data, y) => data[y];\n\nconst _addPositions = (p1, p2) => [\n    p1[0] + p2[0],\n    p1[1] + p2[1],\n];\n\nconst _subtractPositions = (p1, p2) => [\n    p1[0] - p2[0],\n    p1[1] - p2[1],\n];\n\nconst _swap = (arr, i1, i2) => {\n    const tmp = arr[i1];\n    arr[i1] = arr[i2];\n    arr[i2] = tmp;\n};\n\nconst _move = (data, fromIndex, toIndex) => {\n    const cell = data[fromIndex];\n    data.splice(fromIndex, 1);\n    data.splice(toIndex, 0, cell);\n    return data;\n};\n\nconst _isNotInArea = (areaSize, position) => (\n    position[0] < 0 || position[0] >= areaSize[0] ||\n    position[1] < 0 || position[1] >= areaSize[1]\n);\n\nfunction _getValueAt(_data, columns, pos) {\n    const index = _pos2index(pos, columns);\n    if (isNaN(index)) {\n        return;\n    }\n    return _data[index];\n}\n\nfunction _setValueAt(api, _data, columns, pos, value) {\n    const index = _pos2index(pos, columns);\n    if (!isNaN(index)) {\n        _data[index] = value;\n    }\n    return api;\n}\n\nfunction _setAreaAt(api, columns, rows, position, area, anchor = [0,0]) {\n    const pos = _subtractPositions(position, anchor);\n    area.forEach((row, r) => {\n        const targetPos = [0, r + pos[1]];\n        if (targetPos[1] >= rows) {\n            return;\n        }\n        row.forEach((cell, c) => {\n            targetPos[0] = c + pos[0];\n            if (targetPos[0] >= columns) {\n                return;\n            }\n            api.setValueAt(targetPos, cell);\n        });\n    });\n    return api;\n}\n\nfunction _getAreaAt(api, columns, rows, position, size, anchor = [0,0]) {\n    const posTmp = _subtractPositions(position, anchor);\n    const end = [\n        Math.min(posTmp[0] + size[0], columns),\n        Math.min(posTmp[1] + size[1], rows),\n    ];\n    const pos = [\n        Math.max(0, posTmp[0]),\n        Math.max(0, posTmp[1]),\n    ];\n    const area = [];\n    for (let r = pos[1]; r < end[1]; r++) {\n        const rArea = r - pos[1];\n        if (!area[rArea]) {\n            area[rArea] = [];\n        }\n        for (let c = pos[0]; c < end[0]; c++) {\n            const cArea = c - pos[0];\n            area[rArea][cArea] = api.getValueAt([c, r]);\n        }\n    }\n    return area;\n}\n\nfunction _findPosition(columns, data, callback) {\n    const index = data.findIndex(callback);\n    return (index >= 0) ? _index2pos(index, columns) : undefined;\n}\n\nfunction _findPositionInArea(api, columns, pos, size, callback) {\n    const area = api.getAreaAt(pos, size);\n    const flat = _flatten(area);\n    const areaIndex = flat.findIndex(callback);\n    if (areaIndex >= 0) {\n        const areaColumns = area[0].length;\n        const posInArea = _index2pos(areaIndex, areaColumns);\n        return [\n           pos[0] + posInArea[0],\n           pos[1] + posInArea[1],\n        ];\n    }\n}\n\nfunction _checkAreaFitsAt(columns, rows, pos, area) {\n    const fitsHorizontally = pos[0] + area[0].length <= columns;\n    const fitsVertically = pos[1] + area.length <= rows;\n    return fitsHorizontally && fitsVertically;\n}\n\nfunction _getRelativePosition(columns, rows, startPos, direction) {\n    const targetPos = _addPositions(startPos, direction);\n    if (_isNotInArea([columns, rows], targetPos)) {\n        return;\n    }\n    return targetPos;\n}\n\nfunction _moveCell(api, data, columns, rows, from, to) {\n    const fromIndex = _pos2index(from, columns);\n    const size = [columns, rows];\n    if (isNaN(fromIndex) || _isNotInArea(size, from)) {\n        throw new Error(`Trying to move cell from an invalid position. Given: [${from}]`);\n    }\n    const toIndex = _pos2index(to, columns);\n    if (isNaN(toIndex) || _isNotInArea(size, to)) {\n        throw new Error(`Trying to move cell to an invalid position. Given: [${to}]`);\n    }\n    _move(data, fromIndex, toIndex);\n    return api;\n}\n\nfunction _moveRow(_grid, _columns, _rows, yFrom, yTo) {\n    if (yFrom < 0 || yFrom >= _rows) {\n        throw new Error(`Trying to move row from an invalid position. Given: ${yFrom}`);\n    }\n    if (yTo < 0 || yTo >= _rows) {\n        throw new Error(`Trying to move row to an invalid position. Given: ${yTo}`);\n    }\n    return _flatten(_move(_grid, yFrom, yTo));\n}\n\nfunction _moveColumn(grid, columns, rows, xFrom, xTo) {\n    if (xFrom < 0 || xFrom >= columns) {\n        throw new Error(`Trying to move column from an invalid position. Given: ${xFrom}`);\n    }\n    if (xTo < 0 || xTo >= columns) {\n        throw new Error(`Trying to move column to an invalid position. Given: ${xTo}`);\n    }\n    const newGrid = grid.map(row => _move(row, xFrom, xTo));\n    return _flatten(newGrid);\n}\n\nfunction _addRowAt(grid, columns, rows, row, y) {\n    if (y < 0 || y > rows) {\n        throw new Error(`Trying to add row at an invalid position. Given: ${y}`);\n    }\n    if (row.length !== columns) {\n        throw new Error(\n            `Trying to add a row that contains an invalid amount of cells. Expected: ${columns}, Given: ${row.length}`\n        );\n    }\n    grid.splice(y, 0, row);\n    return grid;\n}\n\nfunction _addColumnAt(grid, columns, rows, column, x) {\n    if (x < 0 || x > columns) {\n        throw new Error(`Trying to add column at an invalid position. Given: ${x}`);\n    }\n    if (column.length !== rows) {\n        throw new Error(\n            `Trying to add a column that contains an invalid amount of cells. Expected: ${rows}, Given: ${column.length}`\n        );\n    }\n    return grid.map((row, i) => {\n        row.splice(x, 0, column[i]);\n        return row;\n    });\n}\n\nfunction _removeRowAt(grid, rows, y) {\n    if (y < 0 || y >= rows) {\n        throw new Error(`Trying to remove a row at an invalid position. Given: ${y}`);\n    }\n    if (rows <= 1) {\n        throw new Error('Cannot remove row because the grid would be empty after it.');\n    }\n    grid.splice(y, 1);\n    return grid;\n}\n\nfunction _removeColumnAt(grid, columns, x) {\n    if (x < 0 || x >= columns) {\n        throw new Error(`Trying to remove a column at an invalid position. Given: ${x}`);\n    }\n    if (columns <= 1) {\n        throw new Error('Cannot remove column because the grid would be empty after it.');\n    }\n    return grid.map(row => row.filter((v, c) => c !== x));\n}\n\nfunction _clip(grid, _columns, _rows, position, size) {\n    if (position[0] < 0 || position[0] >= _columns || position[1] < 0 || position[1] >= _rows) {\n        throw new Error(`Trying to clip data at an invalid position. Given: ${position}`);\n    }\n    const endPoint = _addPositions(position, size);\n    return grid\n        .filter((row, r) => r >= position[1] && r < endPoint[1])\n        .map(row => row.filter((cell, c) => c >= position[0] && c < endPoint[0]));\n}\n\nfunction _swapCells(api, pos1, pos2) {\n    const size = api.size();\n    if (_isNotInArea(size, pos1) || _isNotInArea(size, pos2)) {\n        throw new Error('Trying to swap cells with an invalid position.');\n    }\n    const tmp = api.getValueAt(pos1);\n    api.setValueAt(pos1, api.getValueAt(pos2));\n    api.setValueAt(pos2, tmp);\n    return api;\n}\n\nfunction _swapRows(grid, rows, y1, y2) {\n    if (y1 < 0 || y1 >= rows) {\n        throw new Error(`Trying to swap rows from an invalid position. Given: ${y1}`);\n    }\n    if (y2 < 0 || y2 >= rows) {\n        throw new Error(`Trying to swap rows to an invalid position. Given: ${y2}`);\n    }\n    _swap(grid, y1, y2);\n    return _flatten(grid);\n}\n\nfunction _swapColumns(grid, columns, x1, x2) {\n    if (x1 < 0 || x1 >= columns) {\n        throw new Error(`Trying to swap columns from an invalid position. Given: ${x1}`);\n    }\n    if (x2 < 0 || x2 >= columns) {\n        throw new Error(`Trying to swap columns to an invalid position. Given: ${x2}`);\n    }\n    grid.map(row => {\n        _swap(row, x1, x2);\n        return row;\n    });\n    return _flatten(grid);\n}\n\nfunction _rotate(grid, columns, steps) {\n    const mod = steps % 4;\n    const option = mod < 0 ? mod + 4 : mod;\n    switch (option) {\n        case 0:\n            return grid;\n        case 1:\n            return Array.from({ length: columns }, (v, i) => _getColumn(grid, i).reverse());\n        case 2:\n            return grid.reverse();\n        case 3:\n            return Array.from({ length: columns }, (v, i) => _getColumn(grid, columns - 1 - i));\n        default:\n            throw new Error(`Trying to rotate the grid with an invalid steps parameter. Given: ${steps}`);\n    }\n}\n\n/**\n * The gridl base function.\n *\n * @param {Array} data\n * @returns {{ toArray1D, toArray2D, index2pos, pos2index, rows, columns }}\n */\nfunction gridl(data) {\n\n    _isValidGridArray(data);\n\n    let _rows = data.length;\n    let _columns = data[0].length;\n    let _data = _flatten(data);\n\n    const api = {};\n\n    // getter for dimensions\n    api.columns = () => _columns;\n    api.rows = () => _rows;\n    api.size = () => [_columns, _rows];\n\n    // single value operations\n    api.getValueAt = pos => _getValueAt(_data, _columns, pos);                                                          // TODO: merge with getRelativeValue\n    api.setValueAt = (pos, value) => _setValueAt(api, _data, _columns, pos, value);                                     // TODO: provide optional relative offset (direction)\n    api.getRelativeValue = (pos, direction) => api.getValueAt(api.getRelativePosition(pos, direction));                 // TODO: merge this functionality into getValueAt() with an optional parameter \"direction\" that defaults to [0,0]\n    api.getRelativePosition = (pos, direction) => _getRelativePosition(_columns, _rows, pos, direction);                // TODO: rename to \"getPositionFrom\"\n\n    // moving cells\n    api.moveCell = (from, to) => _moveCell(api, _data, _columns, _rows, from, to);\n    api.moveCellFrom = (position, direction) => api.moveCell(position, _addPositions(position, direction));\n    api.moveRow = (yFrom, yTo) => {\n        _data = _moveRow(api.getData(), _columns, _rows, yFrom, yTo);\n        return api;\n    };\n    api.moveColumn = (xFrom, xTo) => {\n        _data = _moveColumn(api.getData(), _columns, _rows, xFrom, xTo);\n        return api;\n    };\n\n    // columns and rows\n    api.getColumn = x => _getColumn(api.getData(), x);\n    api.getRow = y => _getRow(api.getData(), y);\n    api.addRowAt = (row, y) => {\n        const grid = _addRowAt(api.getData(), _columns, _rows, row, y);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        return api;\n    };\n    api.addColumnAt = (column, x) => {\n        const grid = _addColumnAt(api.getData(), _columns, _rows, column, x);\n        _data = _flatten(grid);\n        _columns = grid[0].length;\n        return api;\n    };\n    api.removeRowAt = y => {\n        const grid = _removeRowAt(api.getData(), _rows, y);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        return api;\n    };\n    api.removeColumnAt = x => {\n        const grid = _removeColumnAt(api.getData(), _columns, x);\n        _data = _flatten(grid);\n        _columns = grid[0].length;\n        return api;\n    };\n\n    // clipping\n    api.clip = (position, size) => {\n        const grid = _clip(api.getData(), _columns, _rows, position, size);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        _columns = grid[0].length;\n        return api;\n    };\n\n    // swapping\n    api.swapCells = (pos1, pos2) => _swapCells(api, pos1, pos2);\n    api.swapRows = (y1, y2) => {\n        _data = _swapRows(api.getData(), _rows, y1, y2);\n        return api;\n    };\n    api.swapColumns = (x1, x2) => {\n        _data = _swapColumns(api.getData(), _columns, x1, x2);\n        return api;\n    };\n\n    // area operations\n    api.setAreaAt = (pos, area, anchor) => _setAreaAt(api, _columns, _rows, pos, area, anchor);\n    api.getAreaAt = (pos, size, anchor) => _getAreaAt(api, _columns, _rows, pos, size, anchor);\n    api.checkAreaFitsAt = (pos, area) => _checkAreaFitsAt(_columns, _rows, pos, area);\n\n    // finding\n    api.findPosition = callback => _findPosition(_columns, _data, callback);\n    api.findPositionInArea = (pos, size, callback) => _findPositionInArea(api, _columns, pos, size, callback);\n\n    // exporting data\n    api.getData = () => _toArray2D(_data, _columns);\n\n    // rotating\n    api.rotate = steps => {\n        const grid = _rotate(api.getData(), _columns, steps);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        _columns = grid[0].length;\n        return api;\n    };\n\n    return api;\n\n}\n\ngridl.directions = Object.freeze({\n    TOP:          [ 0, -1],\n    TOP_RIGHT:    [ 1, -1],\n    RIGHT:        [ 1,  0],\n    BOTTOM_RIGHT: [ 1,  1],\n    BOTTOM:       [ 0,  1],\n    BOTTOM_LEFT:  [-1,  1],\n    LEFT:         [-1,  0],\n    TOP_LEFT:     [-1, -1],\n});\n\ngridl.generateData = (columns, rows, callback) => {\n    const parsedColumns = parseInt(columns);\n    const parsedRows = parseInt(rows);\n    if (parsedColumns < 1 || isNaN(parsedColumns)) {\n        throw new Error(`You need to specify at least one column. Given: ${columns}`);\n    }\n    if (parsedRows < 1 || isNaN(parsedRows)) {\n        throw new Error(`You need to specify at least one row. Given: ${rows}`);\n    }\n    return Array.from({ length: parsedRows }, (vr, row) => (\n        Array.from({ length: parsedColumns }, (vc, column) => (\n            callback({ column, row })\n        ))\n    ));\n};\n\ngridl.generate = (columns, rows, callback) => gridl(gridl.generateData(columns, rows, callback));\n\nexport default gridl;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}