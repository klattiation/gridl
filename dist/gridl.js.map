{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 2ba99309478c7960c605","webpack:///./src/index.js"],"names":["gridl","index2pos","index","columns","Math","floor","pos2index","position","toArray2D","array1D","reduce","res","cell","pos","toArray1D","array2D","rows","length","dataStr","Error","row","_guessDimensions","opts","data","numCells","arrayType","_defaultOpts","_mergeOptions","_validArrayTypes","Object","freeze","Array","isArray","includes","join","_opts","_data","size","bind","serialize"],"mappings":"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","file":"gridl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gridl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gridl\"] = factory();\n\telse\n\t\troot[\"gridl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2ba99309478c7960c605","/**\n * Converts cell index into a cell position.\n *\n * @param {Integer} index - The index of the cell.\n * @param {Integer} columns - The number of columns the grid has.\n * @returns {Array} - The equivalent position within the grid as [x, y].\n */\nexport const index2pos = (index, columns) => [index % columns, Math.floor(index / columns)];\n\n/**\n * Converts a position into cell index.\n *\n * @param {Array} position - The two dimensional position array as [x, y].\n * @param {Integer} columns - The number of columns the grid has.\n * @returns {Integer} - The equivalent index within the grid.\n */\nexport const pos2index = (position, columns) => position[0] + position[1] * columns;\n\n/**\n * Converts an one-dimensional grid array into a two-dimensional grid.\n *\n * @param {Array} array1D - The one dimensional array.\n * @param {Integer} columns - The number columns the new array should have.\n * @returns {Array} - The two-dimensional array.\n */\nexport const toArray2D = (array1D, columns) => array1D.reduce((res, cell, index) => {\n    const pos = index2pos(index, columns);\n    if (!res[pos[1]]) {\n        res[pos[1]] = [];\n    }\n    res[pos[1]][pos[0]] = cell;\n    return res;\n}, []);\n\n/**\n * Convert a two-dimensional array into a one-dimensional array.\n *\n * @param {Array} array2D - The two dimensional array to convert.\n * @param {Integer} columns - The number of columns.\n * @param {Integer} rows - The number of rows.\n * @returns {Array} - The flattened one-dimensional array.\n */\nexport const toArray1D = (array2D, columns, rows) => {\n    if (rows !== array2D.length) {\n        const dataStr = `(expected: ${rows}, actually: ${array2D.length})`;\n        throw new Error(`Trying to convert invalid array2D with invalid number of rows to array1D. ${dataStr}`);\n    }\n    return array2D.reduce((res, row) => {\n        if (columns !== row.length) {\n            const dataStr = `(expected: ${columns}, actually: ${row.length})`;\n            throw new Error(`Trying to convert invalid array2D with invalid number of columns to array1D. ${dataStr}`);\n        }\n        return [...res, ...row];\n    }, []);\n};\n\n/**\n * Enhance the options with number of rows and columns if they're not provided by the user.\n *\n * @param {Object} opts - The given options.\n * @param {Array} data - One- or two-dimensional data array.\n * @returns {Object} - The options with rows and columns field.\n * @private\n */\nconst _guessDimensions = (opts, data) => {\n    const numCells = opts.arrayType === '1d' ? data.length : data.reduce((res, row) => res + row.length, 0);\n\n    if (!opts.columns && !opts.rows) {\n        if (opts.arrayType === '2d') {\n            opts.rows = data.length;\n            opts.columns = data[0].length;\n        }\n        else if (opts.arrayType === '1d') {\n            opts.rows = 1;\n            opts.columns = data.length;\n        }\n    }\n    else if (opts.columns && !opts.rows && numCells % opts.columns === 0) {\n        opts.rows = numCells / opts.columns;\n    }\n    else if (!opts.columns && opts.rows && numCells % opts.rows === 0) {\n        opts.columns = numCells / opts.rows;\n    }\n\n    return opts;\n};\n\nconst _defaultOpts = {\n    arrayType: '1d',\n};\n\nconst _mergeOptions = (opts, data) => ({\n    ..._defaultOpts,\n    ..._guessDimensions({ ..._defaultOpts, ...opts }, data),\n});\n\nconst _validArrayTypes = Object.freeze(['1d', '2d']);\n\n/**\n * The gridl base function.\n *\n * @param {Array} data\n * @param {{ arrayType, columns, rows }} opts\n * @returns {{ toArray1D, toArray2D, index2pos, pos2index, rows, columns }}\n */\nexport function gridl(data, opts = {}) {\n\n    if (!Array.isArray(data)) {\n        throw new Error('Trying to use gridl with none-array value for data.');\n    }\n\n    if (opts.arrayType && !_validArrayTypes.includes(opts.arrayType)) {\n        throw new Error(`Trying to use invalid arrayType. expected: (${_validArrayTypes.join('|')}), actually: ${opts.arrayType}`);\n    }\n\n    const _opts = _mergeOptions(opts, data);\n    const _data = _opts.arrayType === '1d' ? [...data] : toArray1D(data, _opts.columns, _opts.rows);\n\n    return {\n        // getter for dimensions\n        columns: () => _opts.columns,\n        rows: () => _opts.rows,\n        size: () => [_opts.columns, _opts.rows],\n\n        // position calculations\n        index2pos: index => index2pos(index, _opts.columns),\n        pos2index: position => pos2index(position, _opts.columns),\n\n        // exporting data\n        toArray1D: () => [..._data],\n        toArray2D: toArray2D.bind(this, _data, _opts.columns),\n        serialize: () => ({\n            opts: _opts,\n            data: _data,\n        }),\n    };\n}\n\nexport default {\n    pos2index,\n    index2pos,\n    toArray2D,\n    toArray1D,\n    gridl,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}