{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a7f4367dd4a18ee21222","webpack:///./src/index.js"],"names":["makeGrid","makeList","make","_isValidGridArray","data","Array","isArray","Error","forEach","row","i","length","_index2pos","index","columns","Math","floor","_pos2index","position","_toArray2D","array1D","reduce","res","cell","pos","_flatten","array2D","_getColumn","x","map","_getRow","y","_addPositions","p1","p2","_subtractPositions","_limit","v","min","max","_swap","arr","i1","i2","tmp","_move","fromIndex","toIndex","splice","_isNotInArea","areaSize","_getValueAt","_data","isNaN","_setValueAt","api","value","_setAreaAt","rows","area","anchor","r","targetPos","c","setValueAt","_getAreaAt","size","posTmp","end","rArea","cArea","valueAt","_find","callback","findIndex","undefined","_findInArea","getAreaAt","flat","areaIndex","areaColumns","posInArea","_checkAreaFitsAt","fitsHorizontally","fitsVertically","_goto","_walk","startPos","direction","_moveCell","from","to","_moveRow","_grid","_columns","_rows","yFrom","yTo","_moveColumn","grid","xFrom","xTo","newGrid","_addRowAt","_addColumnAt","column","_removeRowAt","_removeColumnAt","filter","_clip","endPoint","_swapCells","pos1","pos2","_swapRows","y1","y2","_swapColumns","x1","x2","_rotate","steps","mod","option","reverse","_mirror","limitedIdx","left","right","gridl","_position","numColumns","numRows","setValue","moveCell","moveAbs","moveRel","moveRow","moveColumn","addRow","addColumn","removeRow","removeColumn","clipAt","clip","swapCells","position1","position2","swapCell","swapRows","swapColumns","setAreaAt","setArea","getArea","areaFitsAt","areaFits","find","findInArea","rotate","mirrorX","xPos","mirrorY","yPos","goto","walk","newData","clone","directions","Object","freeze","UP","UP_RIGHT","RIGHT","DOWN_RIGHT","DOWN","DOWN_LEFT","LEFT","UP_LEFT","parsedColumns","parseInt","parsedRows","vr","vc","parsedLength","gridlFactory"],"mappings":"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","file":"gridl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gridl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gridl\"] = factory();\n\telse\n\t\troot[\"gridl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a7f4367dd4a18ee21222","function _isValidGridArray(data) {\n    if (!Array.isArray(data)) {\n        throw new Error('Trying to import data that is not an array.');\n    }\n    data.forEach((row, i) => {\n        if (!Array.isArray(row)) {\n            throw new Error('Trying to import data that is not an array.');\n        }\n        if (i > 0 && data[i - 1].length !== row.length) {\n            throw new Error('Trying to import data with different row lengths.');\n        }\n        if (row.length < 1) {\n            throw new Error('Trying to import grid without any columns. You need to provide at least one column.');\n        }\n    });\n}\n\nconst _index2pos = (index, columns) => [index % columns, Math.floor(index / columns)];\n\nconst _pos2index = (position, columns) => position && position[0] + position[1] * columns;\n\nconst _toArray2D = (array1D, columns) => array1D.reduce((res, cell, index) => {\n    const pos = _index2pos(index, columns);\n    if (!res[pos[1]]) {\n        res[pos[1]] = [];\n    }\n    res[pos[1]][pos[0]] = cell;\n    return res;\n}, []);\n\nconst _flatten = array2D => array2D.reduce((res, row) => [...res, ...row], []);\n\nconst _getColumn = (data, x) => {\n    if (x >= 0 && x < data[0].length) {\n        return data.map(row => row[x]);\n    }\n};\n\nconst _getRow = (data, y) => data[y];\n\nconst _addPositions = (p1, p2) => [\n    p1[0] + p2[0],\n    p1[1] + p2[1],\n];\n\nconst _subtractPositions = (p1, p2) => [\n    p1[0] - p2[0],\n    p1[1] - p2[1],\n];\n\nconst _limit = (v, min, max) => Math.max(Math.min(v, max), min);\n\nconst _swap = (arr, i1, i2) => {\n    const tmp = arr[i1];\n    arr[i1] = arr[i2];\n    arr[i2] = tmp;\n};\n\nconst _move = (data, fromIndex, toIndex) => {\n    const cell = data[fromIndex];\n    data.splice(fromIndex, 1);\n    data.splice(toIndex, 0, cell);\n    return data;\n};\n\nconst _isNotInArea = (areaSize, position) => (\n    position[0] < 0 || position[0] >= areaSize[0] ||\n    position[1] < 0 || position[1] >= areaSize[1]\n);\n\nfunction _getValueAt(_data, columns, pos) {\n    const index = _pos2index(pos, columns);\n    if (isNaN(index)) {\n        return;\n    }\n    return _data[index];\n}\n\nfunction _setValueAt(api, _data, columns, pos, value) {\n    const index = _pos2index(pos, columns);\n    if (!isNaN(index)) {\n        _data[index] = value;\n    }\n    return api;\n}\n\nfunction _setAreaAt(api, columns, rows, position, area, anchor = [0,0]) {\n    const pos = _subtractPositions(position, anchor);\n    area.forEach((row, r) => {\n        const targetPos = [0, r + pos[1]];\n        if (targetPos[1] >= rows) {\n            return;\n        }\n        row.forEach((cell, c) => {\n            targetPos[0] = c + pos[0];\n            if (targetPos[0] >= columns) {\n                return;\n            }\n            api.setValueAt(targetPos, cell);\n        });\n    });\n    return api;\n}\n\nfunction _getAreaAt(api, columns, rows, position, size, anchor = [0,0]) {\n    const posTmp = _subtractPositions(position, anchor);\n    const end = [\n        Math.min(posTmp[0] + size[0], columns),\n        Math.min(posTmp[1] + size[1], rows),\n    ];\n    const pos = [\n        Math.max(0, posTmp[0]),\n        Math.max(0, posTmp[1]),\n    ];\n    const area = [];\n    for (let r = pos[1]; r < end[1]; r++) {\n        const rArea = r - pos[1];\n        if (!area[rArea]) {\n            area[rArea] = [];\n        }\n        for (let c = pos[0]; c < end[0]; c++) {\n            const cArea = c - pos[0];\n            area[rArea][cArea] = api.valueAt([c, r]);\n        }\n    }\n    return area;\n}\n\nfunction _find(columns, data, callback) {\n    const index = data.findIndex(callback);\n    return (index >= 0) ? _index2pos(index, columns) : undefined;\n}\n\nfunction _findInArea(api, columns, pos, size, callback) {\n    const area = api.getAreaAt(pos, size);\n    const flat = _flatten(area);\n    const areaIndex = flat.findIndex((v, i) => callback(v, _index2pos(i, columns), api));\n    if (areaIndex >= 0) {\n        const areaColumns = area[0].length;\n        const posInArea = _index2pos(areaIndex, areaColumns);\n        return [\n           pos[0] + posInArea[0],\n           pos[1] + posInArea[1],\n        ];\n    }\n}\n\nfunction _checkAreaFitsAt(columns, rows, position, area, anchor = [0,0]) {\n    const pos = _subtractPositions(position, anchor);\n    const fitsHorizontally = pos[0] >= 0 && pos[0] + area[0].length <= columns;\n    const fitsVertically = pos[1] >= 0 && pos[1] + area.length <= rows;\n    return fitsHorizontally && fitsVertically;\n}\n\nfunction _goto(columns, rows, position) {\n    if (!Array.isArray(position)) {\n        throw new Error(`Trying to go to an invalid position. Given: ${position}`);\n    }\n    if (_isNotInArea([columns, rows], position)) {\n        throw new Error(`Trying to go to an invalid position. Given: ${position}`);\n    }\n    return position;\n}\n\nfunction _walk(columns, rows, startPos, direction) {\n    const targetPos = _addPositions(startPos, direction);\n    if (_isNotInArea([columns, rows], targetPos)) {\n        throw new Error(`Trying to walk to an invalid position. Position: ${targetPos}`);\n    }\n    return targetPos;\n}\n\nfunction _moveCell(data, columns, rows, from, to) {\n    const fromIndex = _pos2index(from, columns);\n    const size = [columns, rows];\n    if (isNaN(fromIndex) || _isNotInArea(size, from)) {\n        throw new Error(`Trying to move cell from an invalid position. Given: [${from}]`);\n    }\n    const toIndex = _pos2index(to, columns);\n    if (isNaN(toIndex) || _isNotInArea(size, to)) {\n        throw new Error(`Trying to move cell to an invalid position. Given: [${to}]`);\n    }\n    _move(data, fromIndex, toIndex);\n}\n\nfunction _moveRow(_grid, _columns, _rows, yFrom, yTo) {\n    if (yFrom < 0 || yFrom >= _rows) {\n        throw new Error(`Trying to move row from an invalid position. Given: ${yFrom}`);\n    }\n    if (yTo < 0 || yTo >= _rows) {\n        throw new Error(`Trying to move row to an invalid position. Given: ${yTo}`);\n    }\n    return _flatten(_move(_grid, yFrom, yTo));\n}\n\nfunction _moveColumn(grid, columns, rows, xFrom, xTo) {\n    if (xFrom < 0 || xFrom >= columns) {\n        throw new Error(`Trying to move column from an invalid position. Given: ${xFrom}`);\n    }\n    if (xTo < 0 || xTo >= columns) {\n        throw new Error(`Trying to move column to an invalid position. Given: ${xTo}`);\n    }\n    const newGrid = grid.map(row => _move(row, xFrom, xTo));\n    return _flatten(newGrid);\n}\n\nfunction _addRowAt(grid, columns, rows, row, y) {\n    if (y < 0 || y > rows) {\n        throw new Error(`Trying to add row at an invalid position. Given: ${y}`);\n    }\n    if (row.length !== columns) {\n        throw new Error(\n            `Trying to add a row that contains an invalid amount of cells. Expected: ${columns}, Given: ${row.length}`\n        );\n    }\n    grid.splice(y, 0, row);\n    return grid;\n}\n\nfunction _addColumnAt(grid, columns, rows, column, x) {\n    if (x < 0 || x > columns) {\n        throw new Error(`Trying to add column at an invalid position. Given: ${x}`);\n    }\n    if (column.length !== rows) {\n        throw new Error(\n            `Trying to add a column that contains an invalid amount of cells. Expected: ${rows}, Given: ${column.length}`\n        );\n    }\n    return grid.map((row, i) => {\n        row.splice(x, 0, column[i]);\n        return row;\n    });\n}\n\nfunction _removeRowAt(grid, rows, y) {\n    if (y < 0 || y >= rows) {\n        throw new Error(`Trying to remove a row at an invalid position. Given: ${y}`);\n    }\n    if (rows <= 1) {\n        throw new Error('Cannot remove row because the grid would be empty after it.');\n    }\n    grid.splice(y, 1);\n    return grid;\n}\n\nfunction _removeColumnAt(grid, columns, x) {\n    if (x < 0 || x >= columns) {\n        throw new Error(`Trying to remove a column at an invalid position. Given: ${x}`);\n    }\n    if (columns <= 1) {\n        throw new Error('Cannot remove column because the grid would be empty after it.');\n    }\n    return grid.map(row => row.filter((v, c) => c !== x));\n}\n\nfunction _clip(grid, _columns, _rows, position, size) {\n    if (position[0] < 0 || position[0] >= _columns || position[1] < 0 || position[1] >= _rows) {\n        throw new Error(`Trying to clip data at an invalid position. Given: ${position}`);\n    }\n    const endPoint = _addPositions(position, size);\n    return grid\n        .filter((row, r) => r >= position[1] && r < endPoint[1])\n        .map(row => row.filter((cell, c) => c >= position[0] && c < endPoint[0]));\n}\n\nfunction _swapCells(api, pos1, pos2) {\n    const size = api.size();\n    if (_isNotInArea(size, pos1) || _isNotInArea(size, pos2)) {\n        throw new Error('Trying to swap cells with an invalid position.');\n    }\n    const tmp = api.valueAt(pos1);\n    api.setValueAt(pos1, api.valueAt(pos2));\n    api.setValueAt(pos2, tmp);\n    return api;\n}\n\nfunction _swapRows(grid, rows, y1, y2) {\n    if (y1 < 0 || y1 >= rows) {\n        throw new Error(`Trying to swap rows from an invalid position. Given: ${y1}`);\n    }\n    if (y2 < 0 || y2 >= rows) {\n        throw new Error(`Trying to swap rows to an invalid position. Given: ${y2}`);\n    }\n    _swap(grid, y1, y2);\n    return _flatten(grid);\n}\n\nfunction _swapColumns(grid, columns, x1, x2) {\n    if (x1 < 0 || x1 >= columns) {\n        throw new Error(`Trying to swap columns from an invalid position. Given: ${x1}`);\n    }\n    if (x2 < 0 || x2 >= columns) {\n        throw new Error(`Trying to swap columns to an invalid position. Given: ${x2}`);\n    }\n    grid.map(row => {\n        _swap(row, x1, x2);\n        return row;\n    });\n    return _flatten(grid);\n}\n\nfunction _rotate(grid, columns, steps) {\n    const mod = steps % 4;\n    const option = mod < 0 ? mod + 4 : mod;\n    switch (option) {\n        case 0:\n            return grid;\n        case 1:\n            return Array.from({ length: columns }, (v, i) => _getColumn(grid, i).reverse());\n        case 2:\n            return grid.reverse().map((row, r) => row.reverse());\n        case 3:\n            return Array.from({ length: columns }, (v, i) => _getColumn(grid, columns - 1 - i));\n        default:\n            throw new Error(`Trying to rotate the grid with an invalid steps parameter. Given: ${steps}`);\n    }\n}\n\nfunction _mirror(arr, index) {\n    if (index === undefined) {\n        return arr.reverse();\n    }\n    const limitedIdx = _limit(index, 0, arr.length - 1);\n    const left = arr.filter((v, i) => i < limitedIdx);\n    const right = arr.filter((v, i) => i > limitedIdx);\n    return [\n        ...right.reverse(),\n        arr[limitedIdx],\n        ...left.reverse(),\n    ];\n}\n\n/**\n * Generates a new gridl instance.\n *\n * @constructor\n * @param {Array} data - A two-dimsensional grid array. Every row needs to have the same length.\n * @returns {gridl} The new gridl instance.\n */\nfunction gridl(data) {\n\n    /**\n     * @callback iteratorCallback\n     * @param {any} cell - The current cell.\n     * @param {Array.<number>} position - The current position.\n     * @param {gridl} gridlInstance - The current gridl instance.\n     */\n\n    _isValidGridArray(data);\n\n    let _rows = data.length;\n    let _columns = data[0].length;\n    let _data = _flatten(data);\n    let _position = [0,0];\n\n    /**\n     * get the number of columns.\n     */\n    this.numColumns = () => _columns;\n\n    /**\n     * Get the number of rows.\n     * @returns {number}\n     */\n    this.numRows = () => _rows;\n\n    /**\n     * Get the current size of the grid.\n     *\n     * @returns {number[]}\n     */\n    this.size = () => [_columns, _rows];\n\n    /**\n     * Set the value at the current position. You can also set the cell to <code>undefined</code>\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {any} value - The value the cell should have.\n     */\n    this.setValue = value => _setValueAt(this, _data, _columns, _position, value);\n\n    /**\n     * Get or set the value at the current position.<br>\n     * It returns the cell's value if you provide no value and sets it if you do provide a value.<br>\n     * To explicitly set the value to <code>undefined</code> use [setValue()]{@link gridl#setValue}.\n     *\n     * @param {any} value - The value you want to set or <code>undefined</code> if you want to get the value.\n     * @returns {any} The cell's value or the gridl instance if you use it as a setter.\n     */\n    this.value = value => value === undefined ? _getValueAt(_data, _columns, _position) : _setValueAt(this, _data, _columns, _position, value);\n\n    /**\n     * Set the value at a certain position. You can also set the cell to <code>undefined</code>\n     *\n     * @param {Array.<number>} pos - The position where you want to set the value.\n     * @param {any} value - The value you want to set.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.setValueAt = (pos, value) => _setValueAt(this, _data, _columns, pos, value);\n\n    /**\n     * Get or set the value at a certain position.<br>\n     * It returns the cell's value if you provide no value and sets it if you do provide a value.<br>\n     * To explicitly set the value to <code>undefined</code> use [setValueAt()]{@link gridl#setValueAt}.\n     *\n     * @param {Array.<number>} pos - The position where you want to set or get the value.\n     * @param {any} value - The value you want to set or <code>undefined</code> if you want to get the value.\n     * @returns {any} The cell's value or the the same gridl instance if you use it as a setter.\n     */\n    this.valueAt = (pos, value) => value === undefined ? _getValueAt(_data, _columns, pos) : _setValueAt(this, _data, _columns, pos, value);\n\n    /**\n     * Move a cell from one position to another.\n     *\n     * @param {Array} from - The position of the cell that you want to move.\n     * @param {Array} to - The position where the cell should be moved.\n     * @returns {gridl} - The current gridl instance.\n     */\n    this.moveCell = (from, to) => {\n        _moveCell(_data, _columns, _rows, from, to);\n        return this;\n    };\n\n    /**\n     * Move the current cell to an absolute position.\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {Array} to - The position where the cell should be moved.\n     * @returns {gridl}\n     */\n    this.moveAbs = to => {\n        _moveCell(_data, _columns, _rows, _position, to);\n        return this;\n    };\n\n    /**\n     * Move the current cell from the current position in a certain direction.\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {Array} direction - The direction in which to move from the current position.\n     * @returns {gridl} The current gridl instance.\n     */\n    this.moveRel = direction => this.moveCell(_position, _addPositions(_position, direction));\n\n    /**\n     * Move a row to a certain position.\n     *\n     * @param {number} yFrom - The position on the y-axis of the row you want to move.\n     * @param {number} yTo - The position on the y-axis of where the row should be moved to.\n     * @returns {gridl} The current gridl instance.\n     */\n    this.moveRow = (yFrom, yTo) => {\n        _data = _moveRow(this.data(), _columns, _rows, yFrom, yTo);\n        return this;\n    };\n\n    /**\n     * Move a column to a certain position.\n     *\n     * @param {number} xFrom - The position on the x-axis of the column you want to move.\n     * @param {number} xTo - The position on the x-axis of where the column should be moved.\n     * @returns {gridl}\n     */\n    this.moveColumn = (xFrom, xTo) => {\n        _data = _moveColumn(this.data(), _columns, _rows, xFrom, xTo);\n        return this;\n    };\n\n    /**\n     * Get the column at a certain x-position\n     *\n     * @param {number} x - The x-position of the column you want to get.\n     * @returns {Array.<any>}\n     */\n    this.column = x => _getColumn(this.data(), x);\n\n    /**\n     * Get the row at a certain y-position\n     *\n     * @param {number} y - The y-position of the row you want to get.\n     * @returns {Array.<any>}\n     */\n    this.row = y => _getRow(this.data(), y);\n\n    /**\n     * Add a row at a certain y-position. This changes the size of the grid.\n     *\n     * @param {Array.<any>} row - The row you want to add as an one-dimensional array.\n     * @param {number} y - The y-position of where you want to add the row.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.addRow = (row, y) => {\n        const grid = _addRowAt(this.data(), _columns, _rows, row, y);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        return this;\n    };\n\n    /**\n     * Add a column at a certain x-position. This changes the size of the grid.\n     *\n     * @param {Array.<any>} column - The column you want to add as an one-dimensional array.\n     * @param {number} x - The x-position of where you want to add the column.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.addColumn = (column, x) => {\n        const grid = _addColumnAt(this.data(), _columns, _rows, column, x);\n        _data = _flatten(grid);\n        _columns = grid[0].length;\n        return this;\n    };\n\n    /**\n     * Remove a row at a certain y-position. This changes the size of the grid.\n     *\n     * @param {number} y - The y-position of the row you want to remove.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.removeRow = y => {\n        const grid = _removeRowAt(this.data(), _rows, y);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        return this;\n    };\n\n    /**\n     * Remove a column at a certain x-position. This changes the size of the grid.\n     *\n     * @param {number} x - The x-position of the column you want to remove.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.removeColumn = x => {\n        const grid = _removeColumnAt(this.data(), _columns, x);\n        _data = _flatten(grid);\n        _columns = grid[0].length;\n        return this;\n    };\n\n    /**\n     * Clip an area out of the current grid. It removes all cells that are not inside the given area.\n     *\n     * @param {Array.<number>} position - The position the area.\n     * @param {Array.<number>} size - The size of the area.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.clipAt = (position, size) => {\n        const grid = _clip(this.data(), _columns, _rows, position, size);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        _columns = grid[0].length;\n        return this;\n    };\n\n    /**\n     * Clip an area out of the current grid at the current position. It removes all cells that are not inside the given area.<br>\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {Array.<number>} size - The size of the area.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.clip = size => this.clipAt(_position, size);\n\n    /**\n     * Swap the values of two cells.\n     *\n     * @param {Array.<number>} position1 - The position of the first cell.\n     * @param {Array.<number>} position2 - The position of the second cell.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.swapCells = (position1, position2) => _swapCells(this, position1, position2);\n\n    /**\n     * Swaps the values of the cell at the current position and another cell.<br>\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {Array.<number>} position - The position of the first cell.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.swapCell = position => _swapCells(this, _position, position);\n\n    /**\n     * Swaps the values of two rows.\n     *\n     * @param {Array.<number>} y1 - The y-position of the first row.\n     * @param {Array.<number>} y2 - The y-position of the second row.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.swapRows = (y1, y2) => {\n        _data = _swapRows(this.data(), _rows, y1, y2);\n        return this;\n    };\n\n    /**\n     * Swaps the values of two columns.\n     *\n     * @param {Array.<number>} x1 - The x-position of the first column.\n     * @param {Array.<number>} x2 - The x-position of the second column.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.swapColumns = (x1, x2) => {\n        _data = _swapColumns(this.data(), _columns, x1, x2);\n        return this;\n    };\n\n    /**\n     * Overwrite the values of a given area at a certain position.\n     *\n     * @param {Array.<number>} position - The position of the area.\n     * @param {Array.<number>} area - The area itself as two-dimensional grid array.\n     * @param {Array.<number>} [anchor = [0, 0]] - The center of area.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.setAreaAt = (position, area, anchor) => _setAreaAt(this, _columns, _rows, position, area, anchor);\n\n    /**\n     * Overwrite the values of a given area at the current position.<br>\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {Array.<number>} area - The area itself as two-dimensional grid array.\n     * @param {Array.<number>} [anchor = [0, 0]] - The center of area.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.setArea = (area, anchor) => _setAreaAt(this, _columns, _rows, _position, area, anchor);\n\n    /**\n     * Exports the data grid array of a given array at the given position.\n     *\n     * @param {Array.<number>} position - The position of the area.\n     * @param {Array.<number>} size - The size fo the area as a two-dimensional grid array.\n     * @param {Array.<number>} [anchor = [0, 0]] - The center of area.\n     * @returns {number[][]}\n     */\n    this.getAreaAt = (position, size, anchor) => _getAreaAt(this, _columns, _rows, position, size, anchor);\n\n    /**\n     * Exports the data grid array of a given array at the current position.<br>\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {Array.<number>} size - The size fo the area as a two-dimensional grid array.\n     * @param {Array.<number>} [anchor = [0, 0]] - The center of area.\n     * @returns {number[][]}\n     */\n    this.getArea = (size, anchor) => _getAreaAt(this, _columns, _rows, _position, size, anchor);\n\n    /**\n     * Check if a given area would fit inside the grid at a given position.\n     *\n     * @param {number[]} position - The position where the area should be placed.\n     * @param {any[][]} area - The area itself as a two-dimensional grid array\n     * @param {number[]} [anchor = [0, 0]] - The center of area.\n     * @returns {boolean} Whether the area fits or not.\n     */\n    this.areaFitsAt = (position, area, anchor) => _checkAreaFitsAt(_columns, _rows, position, area, anchor);\n\n    /**\n     * Check if a given area would fit inside the grid at the current position.<br>\n     * The current position can be defined by [goto(position)]{@link gridl#goto} or [walk(direction)]{@link gridl#walk}.\n     *\n     * @param {any[][]} area - The area itself as a two-dimensional grid array\n     * @param {number[]} [anchor = [0, 0]] - The center of area.\n     * @returns {boolean} Whether the area fits or not.\n     */\n    this.areaFits = (area, anchor) => _checkAreaFitsAt(_columns, _rows, _position, area, anchor);\n\n    /**\n     * Find the first occurrence of an element within the entire grid.\n     *\n     * @param {iteratorCallback} callback - The callback function that is called on each element. Should return true if the element is found or false if not.\n     * @returns {(Array.<number>|undefined)} The position of the first element that is found or <code>undefined</code> if nothing was found.\n     */\n    this.find = callback => _find(_columns, _data, (v, i) => callback(v, _index2pos(i, _columns), this));\n\n    /**\n     * Find the first occurrence of an element within a certain area.\n     *\n     * @param {Array} position - The position of the area [x, y].\n     * @param {Array} size - The size of the area [columns, rows].\n     * @param {iteratorCallback} callback - The callback function that is called on each element within the defined area. Should return true if the element is found or false if not.\n     * @returns {(Array.<number>|undefined)} The position of the first element that is found or <code>undefined</code> if nothing was found.\n     */\n    this.findInArea = (position, size, callback) => _findInArea(this, _columns, position, size, callback);\n\n    /**\n     * Exports a copy of the internal data as two-dimensional array.\n     *\n     * @returns {any[][]} The data as two-dimensional array.\n     */\n    this.data = () => _toArray2D(_data, _columns);\n\n    /**\n     * Rotate the array in a 90 degree steps. A positive step turns it clockwise, a negative step turns it counterclockwise.\n     *\n     * @param {number} steps - The number of 90 degree turns as integer number.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.rotate = steps => {\n        const grid = _rotate(this.data(), _columns, steps);\n        _data = _flatten(grid);\n        _rows = grid.length;\n        _columns = grid[0].length;\n        return this;\n    };\n\n    /**\n     * Flips the array on the given x-position\n     *\n     * @param {number} xPos - The x-position of where to flip the array.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.mirrorX = xPos => {\n        _data = _flatten(_mirror(this.data(), xPos));\n        return this;\n    };\n\n    /**\n     * Flips the array on the given y-position.\n     *\n     * @param {number} yPos - The y-position of where to flip the array.\n     * @returns {gridl} The same gridl instance.\n     */\n    this.mirrorY = yPos => {\n        const grid = this.data();\n        _data = _flatten(grid.map(row => _mirror(row, yPos)));\n        return this;\n    };\n\n    /**\n     * Go to an absolute position.\n     * The internal cursor will be set to this position and can then be used for further operations.\n     *\n     * @param {Array} position - The new position.\n     * @returns {gridl}\n     */\n    this.goto = position => {\n        const pos = _goto(_columns, _rows, position);\n        _position[0] = pos[0];\n        _position[1] = pos[1];\n        return this;\n    };\n\n    /**\n     * Walk in a given direction based on the current position.\n     *\n     * @param {Array} direction - The direction you want to go. (It's the position relative to the current position)\n     * @returns {gridl} The same gridl instance.\n     */\n    this.walk = direction => {\n        const pos = _walk(_columns, _rows, _position, direction);\n        _position[0] = pos[0];\n        _position[1] = pos[1];\n        return this;\n    };\n\n    /**\n     * Get the current position.\n     *\n     * @returns {Array} The current position array [column, row].\n     */\n    this.position = () => [\n        _position[0],\n        _position[1],\n    ];\n\n    /**\n     * Map over all cells. It's the equivalent of Array.map just for the grid.\n     *\n     * @param {iteratorCallback} callback - The callback function that is called on each cell.<br><code>function(cell, position, gridlInstance) { return ... }</code>\n     * @returns {gridl} A new gridl instance.\n     */\n    this.map = callback => {\n        const newData = _data.map((v, i) => callback(v, _index2pos(i, _columns), this));\n        return new gridl(_toArray2D(newData, _columns));\n    };\n\n    /**\n     * Iterate over all cells. It's the equivalent of Array.forEach just for the grid.\n     *\n     * @param {iteratorCallback} callback - The callback function is called for each cell.<br><code>function(cell, position, gridlInstance) { return ... }</code>\n     * @returns {gridl} The same gridl instance.\n     */\n    this.forEach = callback => {\n        _data.forEach((v, i) => callback(v, _index2pos(i, _columns), this));\n        return this;\n    };\n\n    /**\n     * Make a clone of the current gridl instance.\n     *\n     * @returns {gridl} A new gridl instance.\n     */\n    this.clone = () => new gridl(_toArray2D(_data, _columns)).goto(_position);\n\n    return this;\n\n}\n\n/**\n * Predefined directions you can walk in.<br>\n * Use it in combination with [walk(direction)]{@link gridl#walk}.\n *\n * @type {Object}\n * @property {Array.<number>} UP - one step up\n * @property {Array.<number>} UP_LEFT - one step left, one step up\n * @property {Array.<number>} UP_RIGHT - one step right, one step up\n * @property {Array.<number>} RIGHT - one step right\n * @property {Array.<number>} LEFT - one step left\n * @property {Array.<number>} DOWN - one step down\n * @property {Array.<number>} DOWN_LEFT - one step left, one step down\n * @property {Array.<number>} DOWN_RIGHT - one step right, one step down\n */\nexport const directions = Object.freeze({\n    UP:         [ 0, -1],\n    UP_RIGHT:   [ 1, -1],\n    RIGHT:      [ 1,  0],\n    DOWN_RIGHT: [ 1,  1],\n    DOWN:       [ 0,  1],\n    DOWN_LEFT:  [-1,  1],\n    LEFT:       [-1,  0],\n    UP_LEFT:    [-1, -1],\n});\n\n/**\n * Create a two dimensional grid array.\n *\n * @param {number} columns - The number of columns.\n * @param {number} rows - The number of rows.\n * @param {Function} callback - The generator function that is called on each cell.\n * @returns {any[][]} The new grid array.\n */\nexport function makeGrid(columns, rows, callback = () => null) {\n    const parsedColumns = parseInt(columns);\n    const parsedRows = parseInt(rows);\n    if (parsedColumns < 1 || isNaN(parsedColumns)) {\n        throw new Error(`You need to specify at least one column. Given: ${columns}`);\n    }\n    if (parsedRows < 1 || isNaN(parsedRows)) {\n        throw new Error(`You need to specify at least one row. Given: ${rows}`);\n    }\n    return Array.from({ length: parsedRows }, (vr, row) => (\n        Array.from({ length: parsedColumns }, (vc, column) => (\n            callback({ column, row })\n        ))\n    ));\n}\n\n/**\n * Generate a one-dimensional array that can be a single row or column.\n *\n * @param {number} length - The length of the array.\n * @param {Function} callback - The generator callback function that is called on each element.\n * @returns {any[]}\n */\nexport function makeList(length, callback = () => null) {\n    const parsedLength = parseInt(length);\n    if (parsedLength < 1 || isNaN(parsedLength)) {\n        throw new Error(`Trying to make a list with an invalid length. Given: ${length}`);\n    }\n    return Array.from({ length: parsedLength }, (v, i) => callback(i));\n}\n\n/**\n * Generate a gridl instance from scratch by specifying the number of rows and columns and fill it with values.\n *\n * @param {number} numColumns - The number of columns.\n * @param {number} numRows - The number of rows.\n * @param {Function} callback - The generator function that is called for each cell. The returned value is going to be the value of the cell.\n * @returns {gridl} A new gridl instance\n */\nexport function make(numColumns, numRows, callback) {\n    return new gridl(makeGrid(numColumns, numRows, callback));\n}\n\n/**\n * Creates a new gridl instance.<br>\n * <br>\n * This is exported as the default function. It serves as a wrapper around gridl so that you don't have to use the <code>`new`</code>\n * keyword each time. So instead of saying `<code>new gridl(data)</code>` you can just say `<code>gridl(data)</code>`.\n * That's the only reason for gridlFactory.<br>\n * <br>\n * Please don't care too much about the difference between gridl and gridlFactory. Just use it as `<code>gridl(data)</code>`.\n *\n * @constructor\n * @param {Array} data - A two dimensional grid array. Every row needs to have the same length.\n * @returns {gridl}\n */\nconst gridlFactory = data => new gridl(data);\ngridlFactory.directions = directions;\ngridlFactory.make = make;\ngridlFactory.makeGrid = makeGrid;\ngridlFactory.makeList = makeList;\n\nexport default gridlFactory;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}